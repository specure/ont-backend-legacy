/*******************************************************************************
 * Copyright 2013-2014 alladin-IT GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package at.alladin.rmbt.controlServer;

import at.alladin.rmbt.shared.ErrorList;
import at.alladin.rmbt.shared.ResourceManager;
import at.alladin.rmbt.shared.hstoreparser.HstoreParseException;
import at.alladin.rmbt.shared.qos.QoSUtil;
import at.alladin.rmbt.shared.qos.QoSUtil.TestUuid;
import at.alladin.rmbt.shared.qos.QoSUtil.TestUuid.UuidType;
import org.json.JSONException;
import org.json.JSONObject;
import org.restlet.data.Language;
import org.restlet.data.Preference;
import org.restlet.resource.Get;
import org.restlet.resource.Post;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

public class OpenTestQoSResource extends ServerResource {

    // logger instance
    private static final Logger logger = LoggerFactory.getLogger(OpenTestQoSResource.class);


    @Post("json")
    public String request(final String entity) {
        // log request
        logger.debug("rquest: " +entity);

        addAllowOrigin();

        final ErrorList errorList = new ErrorList();
        final JSONObject answer = new JSONObject();
        String answerString;

        logger.info("QoS test result request from "+ getIP());

        try {
            String lang = null;
            String openUUID = getRequest().getAttributes().get("open_test_uuid").toString();
            if (getRequest().getAttributes().containsKey("lang")) {
                lang = getRequest().getAttributes().get("lang").toString();
            } else {
                List<Preference<Language>> languageList = getRequest().getClientInfo().getAcceptedLanguages();
                if (languageList != null && languageList.size() > 0) {
                    lang = languageList.get(0).getMetadata().getName();
                }
            }

            // Load Language Files for Client

            final List<String> langs = Arrays.asList(settings.getString("RMBT_SUPPORTED_LANGUAGES").split(",\\s*"));

            if (langs.contains(lang)) {
                labels = ResourceManager.getSysMsgBundle(new Locale(lang));
            } else {
                lang = settings.getString("RMBT_DEFAULT_LANGUAGE");
            }

            errorList.setLanguage(lang);

            if (conn != null) {
                QoSUtil.evaluate(settings, conn, new TestUuid(openUUID, UuidType.OPEN_TEST_UUID), answer, lang, errorList);
            } else {
                errorList.addError("ERROR_DB_CONNECTION");
            }

        } catch (final JSONException e) {
            errorList.addError("ERROR_REQUEST_JSON");
            logger.error(e.toString());
        } catch (SQLException e) {
            errorList.addError("ERROR_DB_CONNECTION");
            logger.error(e.toString());
        } catch (HstoreParseException e) {
            errorList.addErrorString(e.getMessage());
            logger.error(e.toString());
        } catch (IllegalArgumentException e) {
            errorList.addError("ERROR_REQUEST_JSON");
            logger.error(e.toString());
        } catch (IllegalAccessException e) {
            logger.error(e.toString());
        } catch (UnsupportedOperationException e) {
            errorList.addError("ERROR_REQUEST_QOS_RESOURCE_DETAIL_NO_UUID");
            logger.error(e.toString());
        }

        try {
            answer.putOpt("error", errorList.getList());
        } catch (final JSONException e) {
            logger.error("Error saving ErrorList: " + e.toString());
        }

        answerString = answer.toString();

        // log response
        logger.debug("rsponse: " + answer.toString());

        return answerString;
    }

    @Get("json")
    public String retrieve(final String entity) {
        return request(entity);
    }

}
